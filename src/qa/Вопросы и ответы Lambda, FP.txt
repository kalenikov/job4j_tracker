1. Что такое lambda-выражение?
    безыменный метод, который служит для передачи поведения в другое место программы, так будто это данные
    Лямбда-выражение представляет собой блок кода, который можно передать в другое место, поэтому он может быть выполнен позже, один или несколько раз  


2. Что такое функциональные интерфейсы?
    Это интерфейс, который содержит только 1 абстрактный метод.
    Основное назначение – использование в лямбда выражениях и method reference.  
    К функциональному интерфейсу можно добавить аннотацию @FunctionalInterface (cообщить компилятору, что данный интерфейс функциональный и должен содержать не более одного метода.)

https://job4j.ru/edu/task?action=task&taskId=0873958f7758004101775991ec02771b&number=461800
3. Перечислите функциональные интерфейсы из пакета java.util.function.
    Supplier (поставщик, get) возвращает объект, нет параметров
    Consumer\BiConsumer (потребитель, accept) - возвращает ничего, совершает действие
    Predicate\BiPredicate (утверждение, test) - проверка условия, возвращает boolean
    Function\BiFunction (функция, apply) - преобразует входной параметр и возвращает его
    UnaryOperator\BinaryOperator - Function, типы входа и выхода должны совпадать

4. Что такое функции высшего порядка?
    то функция, которая либо принимает другую функцию в качестве аргумента, либо возвращает функцию в качестве значения.
    Если тип аргумента или возвращаемого значения - функциональный интерфейс, значит, мы имеем функцию
    высшего порядка.

5. Какие функциональные интерфейсы из пакета java.util.function поддерживают функции высшего порядка?
    ???

6. Что такое ссылки на методы?
    с JDK 8 в Java можно в качестве параметра в метод передавать ссылку на другой метод через квадроточие.
    Ссылка на метод - это компактное лямбда-выражение, которое позволяет передавать ссылки на методы или конструкторы.
    стат
        класс::имя_стат_метода
    нестат
        объект::имя_метода - ссылка на метод конкретного объекта
        класс::new - ссылка на конструктор
        класс::имя_метода
    При использовании функциональных интерфейсов должна совпадать сигнатура

7. Что такое ссылки на конструкторы?
    название_класса::new
    При использовании конструкторов методы функциональных интерфейсов должна совпадать сигнатура


8. Расскажите о зоне видимости переменных в lambda - выражениях?
    Лямбда-выражения имеют доступ к переменным в области видимости, в которой их определили. Но доступ возможен только при условии, что переменные являются effective final, то есть либо явно имеют модификатор final, либо не меняют своего значения после инициализации (константы). 
    Если переменной присваивается значение во 2й раз, то лямбда-выражение вызовет ошибку компиляции.
    Можно ссылаться на:
        effective final локальные переменные;
        поля примитивных типов;
        статические переменные.

    1. Переменная, объявленная внутри лямбда-выражения, доступна только в самом лямбда-выражении.

9. Как быть в ситуации, если внутри lambda - выражении операторы могут выкинуть исключение?
    https://www.codeflow.site/ru/article/java-lambda-exceptions
    
    uncheked:
        можно поймать исключение в теле лямбда-выражения try-catch
        можно написать метод-обертку, который будет отвечать за обработку исключения, а затем передали лямбда-выражение в качестве параметра этому методу.
    checked:
        (из функц интерфейсов нельзя выбрасывать checked)
        оно должно быть объявлено в интерфейсе в выражении throws
        обернуть в unchecked (runtime)

    обернуть в RuntimeException
    Если оно генерирует проверяемое исключение, то последнее должно быть совместимо с исключениями, перечисленными в выражении throws из объявления абстрактного метода в функциональном интерфейсе.

10. Что такое Stream API?
    Набор интерфейсов
    Способ работы с даннными как с потоками.
    Поток представляет канал передачи данных от источника, источником может быть массивы, коллекции, или например файлы.
    Над потоком можно выполнять два типа операций
    -- промежуточные (возвращают модифицированный поток)
    -- терминальные (возвращают результат)
    промежуточные операции выполняют свои вычисления только когда применяетя терминальная операция
    потоки нельзя использовать повторно


11. Расскажите, какой шаблон проектирования используется внутри Stream API?
    стратегия

12. Перечислите конвейерные методы Stream API
    filter
    skip
    distinct
    map, flatMap
    peek
    limit
    sorted


13. Перечислите терминальные методы Stream API
    findFirst
    collect
    count
    min,max
    forEach
    reduce


14. Что такое ленивая загрузка?
    Лямбда вычисляется, когда вызывается метод у функционального интерфейса. В нашем примере это метод compare
    Все конвейерные методы - ленивые, они не будут исполнены пока не выполнен терминальный метод
    Или, например, сортировка вообще не будет вызвана, если в стриме один элемент

15. Что делает метод filter?
    Представляет промежуточную операцию. Он принимает в качестве параметра условие в виде объекта Predicate и возвращает новый поток из элементов

16. Что делает метод map.
    позволяет задать функцию преобразования одного объекта в другой, то есть получить из элемента одного типа элемент другого типа
    Передаваемая в метод map функция задает преобразование от объектов типа T к типу R. И в результате возвращается новый поток с преобразованными объектами.

17. Что делает метод flatMap?
    Плоское отображение выполняется тогда, когда из одного элемента нужно получить несколько. 


18. Что делает метод collect?
    терминальная операция, преобразует поток в коллекцию
    есть несколько встроенных функций в классе Collectors: toList, toSet, toMap

19. Что делает метод reduce?
    выполнять агрегатное действие над всей коллекций
    получает два аргумента - аккумулятор и текущее значение


20. Что делает метод findFirst?
21. Возможно ли прервать выполнение потока по аналогии с break?
    Stream может выполнятся в несколько параллельных потоков, поэтому прерывание может привести к некорректным результатам.
    С Java 9 можно использовать java takeWhile - промежуточная операция, возвращает элементы до тех пор, пока они удовлетворяют условию, т.е. предикат возвращает true.


22. Возможно ли пропустить элемент потока по аналогии с continue?
    Вместо этого можно использовать filter - промежуточная операция, фильтрует элементы по условию.
    А также return

23. Что такое Optional?
    (JDK 1.8) Задача класса java.util.Optional - это устранить появление в программе NullPointerException.
    Optional всего лишь контейнер: он может содержать значение или некоторый тип Т или просто быть null
    Назначение - избавить от повторяющихся провернку на null


24. Перечислите методы Optional?
    empty - возвращает Optional с null внутри
    of -  возвращает Optional с not null значением внутри.
    ofNullable - c возможностью пустого значения
    get - вернуть значение или возбудить Ex
    isPresent - выполнить действие (Consumer)
    ifPresent - boolean
    ifPresentOrElse - выполнить действие (Consumer) или Runnable
    orElse - return value != null ? value : other; 
    orElseThrow
    orElseGet
    filter 
    flatmap

    filter - дает возможность отфильтровать значение опционального типа. Мы передаем ему в параметр Predicat, он возвращает булево значение. Если значение true, то возвращается этот же опционал, если значение false, то возвращается пустой опционал Optional.empty().

    flatMap - применяется для изменения значения установленного в опционале. Функция которая передается в метод flatMap должна возвращать опционал. Если значение не установлено, вернется Optional.empty().

25. Расскажите про фабричные методы List.of, Set.of, Map.of?
    методы позволяющие создавать неизменяемые коллекции
    Метод of() в интерфейсе List перегружен и принимает от одного до десяти элементов
    в Set.of, Map.of нельзя передавать дубли
    никуда нельзя передавать null



26. Для чего используется ключевое слово var?
    используется для вывода типов локальных переменных.
    для автоматического вывода типа переменной. Компилятор берет эту инфу из правой части выражения


27. В каких случаях можно использовать var?
    
    var может использоваться только в сочетании с данными, т.е. нужно обязательно инициализировать переменную. Компилятору нужно знать тип переменной, а тип можно извлечь только из значения.

    Нельзя использовать var в полях.
    В качестве инициализатора переменной нельзя употреблять null
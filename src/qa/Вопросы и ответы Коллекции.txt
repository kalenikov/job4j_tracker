1. Что такое "коллекция"
    класс для хранения набора других элементов

1.1. Перечислите основные методы из интерфейса java.util.Collection
    Интерфейс Collection является фундаментальным интерфейсом для классов Java, поддерживающих наборы данных (коллекции)
    size() -- isEmpty()
    contains() -- containsAll()
    iterator()
    add() -- remove() -- addAll() -- removeAll()
    clear()
    equals() -- hashcode()

2. Назовите преимущества использования коллекций.
    -- не нужно следать за размерами
    -- унифицированные способы работы
        -- сокращают количество кода \ ошибок
    -- можно увеличить производительность


3. Какие данные могут хранить коллекции?
    Коллекции могут хранить любые ссылочные типы данных.


4. Какие есть типы коллекций? Как они характеризуются?
    все коллекции разделяются на два типа
        1) последовательные наборы данных (интерфейс Collection)
        2) наборы ключ-значение (интерфейс Map)
    Collection расширяет три интерфейса
        List - список элементов в том порядке в каком положили
        Set - коллекции уникальных значений
        Queue  (киу) - хранения элементов в порядке, нужном для обработки
    Map - наборы ключ-значение


5. Назовите основные реализации List, Set, Map.
    List:: ArrayList, LinkedList
    Set:: HashSet, LinkedHashSet, TreeSet
    Map:: HashMap, LinkedHashMap, TreeMap


6. В чём отличие ArrayList от LinkedList?
    ArrayList - список на основе массива, который умеет динамически расширяться
    + быстрота доступа по индексу
    + расходы на хранение
    + вставка в конец (в среднем) за константное время
    - при вставке в середину происходит свдиг элементов
    ==  по умолчанию n = 10 (размер)

    LinkedList - список на основе связного списка, который хранит ссылка на элементы до и после
    + вставка и удаление на конст время
    - доступ за линейное время (кроме первого и последнего)

    LinkedList предпочтительно применять, когда происходит активная работа (вставка/удаление) с серединой списка или когда необходимо гарантированное время добавления элемента в список.


7. В чём отличие HashSet от TreeSet?
    Set - множество неповторяющихся элементов.
    HashSet хранит данные в произвольном порядке (хранит свои значения как ключи HashMap).
    TreeSet хранит данные в отсортированном виде (в основе реализации бинарное красно-черное дерево), сложность выполнение ln N
 

8. В чём отличие Set от Map?
    Set - множество уникальных объектов
    Map - множество пар элементов с уникальными ключами


9. Как задается порядок следования объектов в коллекции, как отсортировать коллекцию?
    Порядок задается 
    а) естественным следованием элементов (Natural order) -- Collections.sort(collection);
    б) объектом, реализующим интерфейс сравнения Comparator -- <T>.sort(<? impl Comparator>)


10. Чем отличается Comparable от Comparator?
    Comparable - интерфейс
    если его реализовать: 
    -- два объекта получают возможность сравнения между собой: acc1.compareTo(acc2), используя естественный порядок)
    -- можно использовать compareTo, т.е методы Collection.sort() или Arrays.sort()

    Comparator - отдельный класс, который позволяет сравнить два объекта, которые ему нужно передать


11. Что такое сортировка по принципу Natural Order?

    сортировка объектов с помощью метода compareTo() интерфейса Comparable.

    a,b
    отрицательный int (первый объект отрицательный, то есть меньше)
    положительный int (первый объект положительный, хороший, то есть больший)
    ноль = объекты равны

    Некоторые классы из коробки реализуют естественный порядок natural order для сортировки:

    строки - лексикографический (по алфавиту),
    числа - числовой, знаковый или без (больше меньше),
    дата - хронологичский (по датам),
    файл - лексикографический по имени пути
    boolean - false < true
    Остальные классы нужно руками делать Comparable или Comparator.


12. Что такое equals и hashcode?
    Методы, необходимые для сравнения объектов.
    equals - метод, который реализует класс для сравнения своих экземпляров по значимым полям
    hashcode - для увеличения производительности при сравнении. Хэш возвращает для любого объекта 32битный int
    1 для одного и того-же объекта, хеш-код всегда будет одинаковым
    2 если объекты одинаковые, то и хеш-коды одинаковые
    3 если хеш-коды равны, то входные объекты не всегда равны 
    4 если хеш-коды разные, то и объекты гарантированно разные;

    принято переопределять методы hashCode() и equals() таким образом, что бы учитывались поля объекта.

    @Override
    public boolean equals(Object o) {
       if (this == o) return true;
       if (o == null || getClass() != o.getClass()) return false;
       Man man = (Man) o;
       return dnaCode == man.dnaCode;
    }


13. Какие есть способы перебора всех элементов List?
    циклами (for, while)
    итераторами
    foreach

14. Как реализован цикл foreach?
    Через iterator (класс наследуется от iterable, то мы можем перебирать элементы этой коллекции форичем)
    -- В цикле foreach нельзя использовать метод remove(index). Вместо этого следует использовать iterator.remove()

15. В чем разница между Iterator и Iterable?
    interface Iterable -- имплементация этого интерфейса позволяет объекту быть итерируемым с помощью for-each. 
    interface Iterator -- его имплементации задаются правила обхода коллекции. 
    Инструмент итерирования по коллекции. Итератор это отдельный класс, как правило вложенный в итерируемый класс, который задает логику итерации по итерируемому. 

16. Как происходит удаление элементов из ArrayList?
    Находится заданный элемент. Далее сдвигаются влево на один элемент все последующие элементы, а значение size уменьшается на 1.
    

17. Как происходит удаление элементов из LinkedList?
    Заменяются ссылки previous и next у соседних элементов.